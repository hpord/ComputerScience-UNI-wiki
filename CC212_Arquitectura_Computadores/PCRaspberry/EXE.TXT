I. Introduccion
 
	1. El lenguaje ensamblador está a 1 paso por encima del binario que ejecuta el hardware.
	El ensamblador convierte el código en binario. Estaremos programando
	el microprocesador ARM en este tutorial. Este código solo funcionará
	con un chip basado en ARM, pero aprendiendo el montaje en una computadora de bajo costo
	usted será capaz de aprender fácilmente a utilizar el montaje en general. El único
	diferencia es el mnemotécnico utilizado. También los chips ARM no sólo se utilizan 
	con Raspberry PI, pero también por la mayoría de los dispositivos móviles.
	
	2. Los microprocesadores manipulan los datos y esto significa que
	Códigos ADD y SUB para sumar y restar. Como estos códigos más 
	son 3 letras de largo. MOV es otro código.
	
	3. Otra razón por la que aprender ensamblador en un chip ARM es una buena idea
	es porque el R en ARM significa Computación de Conjunto de Instrucciones Reducidas. ese
	significa que hay un número limitado de instrucciones o códigos como ADD a
	Recordar.
 
II. Setup
 
		
	6. First program
	
	@ Defina dónde comienzan las instrucciones, pero esto no es necesario
	.text 
	
	@ Define _start como un global disponible para todo el programa
	.global _start
	
	@ Defina el punto de partida y que sea una etiqueta con:
	_start:
	
	@ Mover el valor 65 al registro 0
	MOV R0, #65
	
	@Mover el valor 1 al registro 7
	MOV R7, #1
	
	@ Finalice el programa y vuelva al terminal
	SWI 0
	
		a.SWI significa SoftWare Interrupt. Si el R7 tiene un valor de 1 en él SWI sabe salir al terminal. 
		El valor almacenado en R7 es el número Syscall. Dependiendo de cómo se establezcan los diferentes 
		registros, podemos llamar a otras rutinas o bibliotecas de Raspbian. 
		
	7. Compilar código
		a. as -o asmtut.o asmtut.s
			1. Crear un archivo de objeto
			
		b. ld -o asmtut asmtut.o
			1. Crear un archivo ejecutable mediante la vinculación de archivos juntos
		
		c. Ejecutar con ./asmtut ; echo $?
		
	8. Si escribes echo $? en el terminal se devuelve el valor almacenado en R0
	
	9. Second Program
	@ asmtut2.s
	.global _start
	_start:
	MOV R0, #65
	
	@ RAMA a _part2 en la siguiente parte del programa
	BAL _part2
	
	@ asmtut3.s
	.global _part2
	_part2:
	MOV R7, #1
	SWI 0
	
		a. Compile program
		
			1. as -o asmtut2.o asmtut2.s
			
			2. as -o asmtut3.o asmtut3.s
			
			3. ld -o asmtut4.o asmtut2.o asmtut3.o
			
			4. ./asmtut4 ; echo $?
			
	10. Crearemos un archivo make para que sea más fácil de compilar. Un makefile contiene las siguientes reglas
	
		a. Target: requisito previo
		   <TAB>  Receta
		   
		b. Target es el nombre del archivo para generar
		
		c. El requisito previo es un archivo necesario para crear el destino. Si el requisito previo no existe, buscamos su creación en los objetivos que siguen
		
		d. La receta es una acción que hace que las ejecuciones
		
		e.  Agregue lo siguiente para ejecutar la limpieza con(make clean)
		clean:
			rm *.o asmtut
		
		f. asmtut: asmtut.o
				ld -o asmtut asmtut.o
		   asmtut.o asmtut.s
		   		as -o asmtut.o asmtut.s
		   clean:
				rm *.o asmtut
			
III. Registros, bits, bytes y palabras (deslizamiento)
 
	1. Un bit es un 1 o un 0
 
	2. la CPU ARM es una CPU de 32 bits. Un byte tiene 8 bits. 4 bytes o 32 bits se denominan palabras con esta CPU ARM porque 32 bits es la unidad de datos utilizada por Raspberry PI.
	
	3. Los datos se almacenan en la memoria en palabras, pero también tiene acceso a los bytes.
	
	4. La CPU tiene 16 registros que pueden contener una palabra de datos cada uno. Los registros 0 - 12 están siempre disponibles.
	
	5. El registro 13 es un puntero a la pila activa. Los datos se colocan en la pila y el puntero de pila le indica qué tan alta es esa pila de datos. (Más sobre esto más adelante)
	
	6. Registrarse 14 es el Registro de Enlaces. Cuando una instrucción llama a una subrutina, el LR se establece en la dirección de devolución de la subrutina. (Más sobre esto más adelante)
 
	7. Registrarse 15 es el contador del programa. Almacena la dirección de la siguiente instrucción que se va a ejecutar. Realiza un seguimiento de dónde se encuentra el programa en su ejecución del código. (Más sobre esto más adelante)
	
	8. También existe el Registro de Estado del Programa Actual. Almacena información sobre su programa y los resultados de las instrucciones que ha ejecutado. (Más sobre esto más adelante)
			
IV Números binarios (deslizamiento)
 1. Los números binarios contienen sólo 1s y 0s que se combinan para hacer
	base 10 números que utilizamos. 
	
	2. En base 10 123 á 1 : 100, 2 : 10s, 3 : 1s
	
	3. En binario 111 a 1 : 4, 1 : 2, 1 : 1 a 7 en la Base 10
	
	4. De derecha a izquierda los dígitos dobles 64, 32, 16, 8, 4, 2, 1
	
	5. Decimal a binario : Si es posible la resta añadir un 1 y si no no
	
		a. 126 - 64 á 62 : 1
		b. 62 - 32 x 30 : 1
		c. 30 - 16 x 14 : 1
		d. 14 - 8 x 6 : 1
		e. 6 - 4 x 2 : 1
		f. 2 - 2 x 0 : 1
		g. 0 - 1 - NA : 0
		h. 126 a binario es 1111110
		
V. Números hexadecimales (Base 16) (Deslizamiento)
 
	1. Es más fácil representar números binarios como números hexadecimales.
	
	2. Los números hexadecimales contienen los números 0 - 9 y A, B, C, D, E, F para los números
	10 - 15

	3. Podemos representar 4 bits de un número binario con 1 hexadecimal
	
		D H B
		0 0 0000
		1 1 0001
		2 2 0010
		3 3 0011
		4 4 0100
		5 5 0101
		6 6 0110
		7 7 0111
		8 8 1000
		9 9 1001
		10 A 1010
		11 B 1011
		12 C 1100
		13 D 1101
		14 E 1110
		15 F 1111
		
	4. Convertir binario a hexadecimal
	
		a. Convertir un byte en 2 en 2 mordiscos
		
		b. 10101010 se convierte en 1010 1010 o AA
		
	5. Convertir hexadecimal a decimal
	
		a. 0x2A7 ? 
		b. 2 * 16x2 a 512
		c. 10 * 16 x 160
		d. 7 * 1 x 7
		e. 512 + 160 + 7 x 679
		
	6. Convertir decimal a hexadecimal
	
		a. 679 / 256 (16x2) a 2,65 (Desechar el resto)
		b. (679 - 512) 167 / 16 a 10,43 o A (Desechar el resto)
		c. 7 se deja y por lo tanto 679 a 2A7
		
VI. Adición y resta de archivos binarios
		
	1. Adición de binarios
	
		a. 0 + 0 a 0
		b. 1 + 0 a 1
		c. 0 + 1 á 1
		d. 1 + 1 a 0 (Llevar el 1)
		
		e. 0101 : 5
		 + 0011 : 3
		   1000 : 8
		   
	2. Restar binarios
	
		a. Al restar se pide prestado 1 de la izquierda para hacer
		a 0 en un 10 (en binario) o 2 y luego restar 1 de
		
		b. No se puede pedir prestado de un 0 por lo que cuando eso sucede que
		seguir moviéndose a la izquierda hasta que obtenga un 1 para pedir prestado. 
	
	
	3. Dos números de complemento
	
		a. Para convertir un número a su forma negativa voltear cada bit
		y luego añadir 1 a él.
		
		b. 7 a 00111 y -7 a 11001
		
		c. Ahora puede agregar versus restar binarios que algunas personas encuentran más fácil
		
			1. 11000 : 24
			 - 00111 : 7
			 
			   11000 : 24
			 + 11001 : -7
			   10001 : 17
			   
			2. A través de la última broca de transporte para obtener la respuesta correcta
			
VII. Input y Output
 
	1. Para salir a la pantalla necesitamos establecer los parámetros como tales
	
		a. R0 : Flujo de salida (1 : Monitor)
		
		b. R1 : Dirección de los caracteres para escribir
		
		c. R2 : Número de caracteres para escribir
		
		d. R7 : Syscall (4 para escribir en pantalla)
		
	2. @ Hello World
	.global _start
	_start:
		MOV R7, #4 @ Syscall para la salida a la pantalla
		MOV R0,  #1 @ Monitorear el flujo de salida // Monitor output stream
		MOV R2, #12 @ Longitud de la cadena
		LDR R1, =message @ Cargar registro con la direccion del string
		SWI 0
		
	end:
		MOV R7, #1 @ Exit syscall
		SWI 0
		
	.data @ Significa que lo que sigue son datos
	message:
		.ascii "Hello World\n"
		
	3. Para la salida tenemos que establecer parámetros también
	
		a. R0 : Input Stream (0 : Keyboard)
		
		b. R1 : Dirección del búfer para guardar la cadena
		
		c. R2 : numero de caracteres a leer
		
		d. R7 : Syscall (3 para leer desde teclado)
		
	4. @ Read data
	.global _start
	_start:
		MOV R7, #3 @ Syscall leer desde teclado
		MOV R0,  #0 @ entrada de datos desde teclado abierta
		MOV R2, #10 @ leer 10 caracteres
		LDR R1, =message @ consigue el string en mensaje
		SWI 0
		
	_write:
		MOV R7, #4 @ Syscall para salida en pantalla
		MOV R0, #1 @ Salida de datos hacia el monitor
		MOV R2, #5	@ # de caracteres a escribir
		LDR R1, =message @ Imprime el string de mensaje
		SWI 0
		
	end:
		MOV R7, #1
		SWI 0
		
	.data
	message:
		.ascii " "
	
VIII. ADD
	
	1. La mayoría de las instrucciones siguen este orden
	<Instruction> <Dest>, <Operand>, <Operand>
		
		a. Nombre de la instrucción - 3 o 4 caracteres mnemotécnicos
		
		b.Registro de destino
		
		c.Registro para manipular
		
		d. A Register or Value to manipulate
		
	2. ADD value in register 1 plus register 2 and store in register 0
	ADD R0, R1, R2
	
	3. ADD value in register 1 plus number 1 and store in register 0
	ADD R0, R1, #1
	
	4. Add 2 values and output the result
	.global _start
	_start:
	MOV R1, #0xA @ Put 10 in R1
	ADD R0, R1, #0x14 @ Add 10 + 20, store in R0
	MOV R7, #1 @ Exit with a system call
	SWI 0 @ Fin de programa y retorno del terminal
	
	5. make
	./asmtut4 ; echo $?
	   
	6. The SWI instruction interacts with the operating system. Linux provides
	many services and we select the one we want by putting a value in R7. If the program returns a value that value is returned in R0. 
	
IX. SUB
	
	1. Podemos restar los valores
	.global _start
	_start:
	MOV R1, #0x14 @ Put 20 in R1
	SUB R0, R1, #0xA @ Restar 20-10 y guardar en r0
	MOV R7, #1 @ Exit with a system call
	SWI 0 @ Fin de programa y retorno del terminal
	
		a. Da un resultado de 10
		
X. MUL & MLA
 
	1. Multiply values (Must store values in Registers)
	.global _start
	_start:
	MOV R1, #0x14 @ Put 20 in R1
	MOV R2, #0xA @ Put 10 in R2
	MUL R0, R1, #0xA @ Multiply 20 * 10, store in R0
	MOV R7, #1 @ Exit with a system call
	SWI 0 @ End program and return to terminal
	
	2. MLA (Multiply with Accumulate) Multiplies the first 2 register values and then adds that to the last register value
	.global _start
	_start:
	MOV R1, #0x14 @ Put 20 in R1
	MOV R2, #0xA @ Put 10 in R2
	MOV R3, #0x5 @ Put 5 in R3
	MLA R0, R1, R2, R3 @ (R1 * R2) + R3, store in R0
	MOV R7, #1 @ Exit with a system call
	SWI 0 @ End program and return to terminal
	
	3. VIM Copy / Cut and Paste Line
	
		a. Put the cursor on the line to copy
		
		b. Press V to select line
		
		c. Press d to cut or y to copy
		
		d. Move to place to paste
		
		e. P to paste before cursor, or p to paste after
		
		f. u undoes previous actions
		
		g. Ctrl - R Redoes undone action
		
XI. Branching & CPSR & CMP
 
	1. Branch instructions allow us to execute different instructions depending upon conditions. 
	
	2. Register 15 is the program counter and it stores the address of the next instruction to execute. After an instruction executes the PC is incremented by 4 bytes because each instruction is allocated 4 bytes. We can however change how much the PC increments by and execute instructions out of order. This is known as branching. 
	
	3. Branch to a label
	.global _start
	_start:
		MOV R0, #0x14 @ Put 20 in R0
		b other @ Jump to the other label
		MOV R0, #0xB @ Put 11 in R0
	other:
		MOV R7, #1 @ Exit with a system call
		SWI 0 @ End program and return to terminal
		
	4. I mentioned the Current Program Status Register before. It stores info about your program, such as operation results. A bit is set with a 1 if conditions have occurred such as : 
	
		a. Negative Flag : El numero es negativo
		
			1. BPL negclear @ Move to label negclear if result is 0
			2. BMI negset @ Move to label negset if result is set
		
		b. Zero Flag : Set if the result is 0
		
			1. BEQ zeroset @ Move if 0 set
			2. BNE zeroclear @ Move if zero flag is 0
		
		c. Carry Flag : Set if there is a carry bit
		
			1. BCS carryset @ Move if carry set
			2. BCC carryclear @ Move if carry is 0
		
		d. Overflow Flag : Set if the result overflowed into the 31st bit, which is used to signify the sign of the value
		
			1. BVS overflowset @ Move if overflow set
			2. BVC overflowclear @ Move if overflow 0
		
	5. We can compare values using CMP like this : CMP R1, R2
	
		a. Values are compared by subtracting R1 - R2. When executed we can check the CPSR flags and can conditionally execute using branching like this :
		
			1. If R2 > R1 then the Negative Flag would be enabled because the result is negative
			
			2. If R2 < R1 then the Negative Flag wouldn't be set
			
			3. If R2 == R1 then the Zero Flag would be enabled
			
		b.  
		.global _start
		_start:
			MOV R1, #5
			MOV R2, #10
			CMP R1, R2 @ Compare values setting flags
			BEQ vals_equal @ If equal jump to vals_equal (Zero Flag Set)
			BGT r1_gt @ If R1 is greater jump to r1_gt (Negative Flag Set)
			
		@ Come here next by default
		r1_lt:
			MOV R0, #2
			B end
			
		r1_gt:
			MOV R0, #3
			B end
			
		vals_equal:
			MOV R0, #1
			
		end:
			MOV R7, #1 
			SWI 0
			
			1. You can also check for
			
				a. BNE : !=
				
				b. BGE : >=
				
				c. BLE : <=